openshift.withCluster() {
	echo "Starting pipeline"
	env.NAMESPACE = openshift.project()
	env.DEV = openshift.project()                   //use the same name space for dev now
	echo "Namespace: ${env.NAMESPACE}"
}

pipeline {
	agent {
		node {
			label "master"
		}
	}
	environment {
		//Global Vars
		API_NAME = "aspnetcore-api-docker"
		API_DIR = "CoreApiContainer"
		UI_NAME = "aspnetcore-ui-docker"
		UI_DIR = "CoreWebContainer"
	}
	options {
		timeout(time: 20, unit: 'MINUTES')
	}
	stages {
		stage('Apply Openshift templates'){
			steps{
				echo 'Applying templates'
				dir("${env.API_DIR}"){
					script{
						//Set DOTNET_CLI_HOME
						sh """export DOTNET_CLI_HOME=/tmp"""
						//create or update template and "create it aka apply"
						openshift.withCluster(){
							openshift.withProject(env.NAMESPACE){
								sh """oc process -f aspnetcore-docker-template.yml -p NAME=${env.API_NAME} -p JURISDICTION=DEV | oc apply -f-"""
							}
						}
					}
				}
			}
		}
		stage('Build Image'){
			steps{
				echo 'Building Image'
				script{
					//Build the image for aspnetcore-api-docker
					openshift.withCluster(){
						openshift.withProject(env.NAMESPACE){
							//openshiftBuild(bldCfg: "${env.API_NAME}", showBuildLogs: 'true') //NOTE: steps like this one from the OpenShift Pipeline Plugin will not be supported against OpenShift API Servers later than v3.11
							sh """oc start-build ${env.API_NAME} --from-dir=${env.API_DIR} --follow"""
						}
					}
				}
			}
		}		
	}
}