kind: Template
apiVersion: v1
metadata:
  name: aspnetcore-docker-template
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
    spec: {}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
    spec:
      nodeSelector: null
      output:
        to: 
          kind: ImageStreamTag
          name: '${NAME}:latest'
      resources: {}
      source:
        type: Binary
      strategy:
        type: Docker
        dockerStrategy:
          env: 
            - name: DOTNET_CLI_HOME
              value: /tmp          
          dockerfilePath: Dockerfile
      postCommit: {}
      triggers: []
      runPolicy: Serial
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
    spec:
      host: ${HTTP_HOSTNAME}
      to:
        kind: Service
        name: ${NAME}
      port:
        targetPort: web      
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
    spec:
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 8080
      selector:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
        jurisdiction: ${JURISDICTION}
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ConfigChange
        - type: ImageChange
          automatic: true
          containerNames:
            - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}:latest
      replicas: 1
      selector:
        app: ${NAME}
        name: ${NAME}
        jurisdiction: ${JURISDICTION}
      template:
        metadata:
          labels:
            app: ${NAME}
            name: ${NAME}
        spec:
          restartPolicy: Always
          containers:
            name: ${NAME}
          livenessProbe:
            httpGet:
              path: /api/values
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 40
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/values
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 40
            timeoutSeconds: 30
parameters:
  - name: NAME
    description: 'The name for the application'
    required: true
    displayName: NAME
  - name: JURISDICTION
    description: 'Where the application is be deployed, eg Dev, Test, or Prod'
    required: true
    displayName: JURISDICTION
  - name: HTTP_HOSTNAME
    description: 'Custom host name for http service route. Leave Blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Http Host Name